
my lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000001aa  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000025c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a45  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069f  00000000  00000000  00000d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c3  00000000  00000000  000013d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001798  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033f  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b4  00000000  00000000  00001b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001e0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  7a:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_command>:
	lcd_command(0x06);
	lcd_command(0x01);
	
}
void lcd_command(unsigned char cmd){
	lcd_port=(lcd_port & 0x0f)|(cmd & 0xf0);
  82:	9b b3       	in	r25, 0x1b	; 27
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	9b bb       	out	0x1b, r25	; 27
	clear_bit(lcd_con,RS);
  8e:	98 b3       	in	r25, 0x18	; 24
	set_bit(lcd_con,EN);
  90:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	33 e0       	ldi	r19, 0x03	; 3
  94:	3a 95       	dec	r19
  96:	f1 f7       	brne	.-4      	; 0x94 <lcd_command+0x12>
  98:	00 00       	nop
	_delay_us(10);
	clear_bit(lcd_con,EN);
  9a:	98 b3       	in	r25, 0x18	; 24
  9c:	e3 ef       	ldi	r30, 0xF3	; 243
  9e:	f1 e0       	ldi	r31, 0x01	; 1
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_command+0x1e>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <lcd_command+0x24>
  a6:	00 00       	nop
	_delay_us(2000);
	lcd_port=(lcd_port & 0x0f)|(cmd <<4);
  a8:	2b b3       	in	r18, 0x1b	; 27
  aa:	2f 70       	andi	r18, 0x0F	; 15
  ac:	f0 e1       	ldi	r31, 0x10	; 16
  ae:	8f 9f       	mul	r24, r31
  b0:	c0 01       	movw	r24, r0
  b2:	11 24       	eor	r1, r1
  b4:	82 2b       	or	r24, r18
  b6:	8b bb       	out	0x1b, r24	; 27
		clear_bit(lcd_con,RS);
  b8:	88 b3       	in	r24, 0x18	; 24
		set_bit(lcd_con,EN);
  ba:	c3 9a       	sbi	0x18, 3	; 24
  bc:	00 00       	nop
		_delay_us(1);
		clear_bit(lcd_con,EN);
  be:	88 b3       	in	r24, 0x18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	83 ef       	ldi	r24, 0xF3	; 243
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <lcd_command+0x42>
  c8:	00 c0       	rjmp	.+0      	; 0xca <lcd_command+0x48>
  ca:	00 00       	nop
  cc:	08 95       	ret

000000ce <lcd_init>:
 *  Author: ahmad
 */ 
#include "lcd.h"

void lcd_init (void){
	lcd_dd = 0xff;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
	lcd_con_dd = 0x0f;
  d2:	8f e0       	ldi	r24, 0x0F	; 15
  d4:	87 bb       	out	0x17, r24	; 23
	set_bit(lcd_con_dd,2);
  d6:	ba 9a       	sbi	0x17, 2	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	8a 95       	dec	r24
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_init+0xc>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_init+0x12>
	_delay_us(20);
	lcd_command(0x33);
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(0x32);
  e6:	82 e3       	ldi	r24, 0x32	; 50
  e8:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
    lcd_command(0x28);
  ec:	88 e2       	ldi	r24, 0x28	; 40
  ee:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(0x0e);
  f2:	8e e0       	ldi	r24, 0x0E	; 14
  f4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(0x06);
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(0x01);
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 104:	08 95       	ret

00000106 <lcd_write>:
		clear_bit(lcd_con,EN);
		_delay_ms(2);
}
void lcd_write (unsigned char	 data){
	
		lcd_port=(lcd_port & 0x0f)|(data & 0xf0);
 106:	9b b3       	in	r25, 0x1b	; 27
 108:	9f 70       	andi	r25, 0x0F	; 15
 10a:	28 2f       	mov	r18, r24
 10c:	20 7f       	andi	r18, 0xF0	; 240
 10e:	92 2b       	or	r25, r18
 110:	9b bb       	out	0x1b, r25	; 27
		set_bit(lcd_con,RS);
 112:	c1 9a       	sbi	0x18, 1	; 24
		set_bit(lcd_con,EN);
 114:	c3 9a       	sbi	0x18, 3	; 24
 116:	33 e0       	ldi	r19, 0x03	; 3
 118:	3a 95       	dec	r19
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_write+0x12>
 11c:	00 00       	nop
		_delay_us(10);
		clear_bit(lcd_con,EN);
 11e:	98 b3       	in	r25, 0x18	; 24
 120:	e3 ef       	ldi	r30, 0xF3	; 243
 122:	f1 e0       	ldi	r31, 0x01	; 1
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_write+0x1e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_write+0x24>
 12a:	00 00       	nop
		_delay_us(2000);
		lcd_port=(lcd_port & 0x0f)|(data <<4);
 12c:	2b b3       	in	r18, 0x1b	; 27
 12e:	2f 70       	andi	r18, 0x0F	; 15
 130:	f0 e1       	ldi	r31, 0x10	; 16
 132:	8f 9f       	mul	r24, r31
 134:	c0 01       	movw	r24, r0
 136:	11 24       	eor	r1, r1
 138:	82 2b       	or	r24, r18
 13a:	8b bb       	out	0x1b, r24	; 27
		set_bit(lcd_con,RS);
 13c:	c1 9a       	sbi	0x18, 1	; 24
		set_bit(lcd_con,EN);
 13e:	c3 9a       	sbi	0x18, 3	; 24
 140:	33 e0       	ldi	r19, 0x03	; 3
 142:	3a 95       	dec	r19
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_write+0x3c>
 146:	00 00       	nop
		_delay_us(10);
		clear_bit(lcd_con,EN);
 148:	88 b3       	in	r24, 0x18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	85 ed       	ldi	r24, 0xD5	; 213
 14c:	96 e0       	ldi	r25, 0x06	; 6
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_write+0x48>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_write+0x4e>
 154:	00 00       	nop
 156:	08 95       	ret

00000158 <lcd_str>:
		_delay_ms(7);
}
void lcd_str (char *str){
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ec 01       	movw	r28, r24
	int i;
	while (str[i]!=0){
 15e:	88 81       	ld	r24, Y
 160:	88 23       	and	r24, r24
 162:	31 f0       	breq	.+12     	; 0x170 <lcd_str+0x18>
 164:	21 96       	adiw	r28, 0x01	; 1
		lcd_write(str[i]);
 166:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
		clear_bit(lcd_con,EN);
		_delay_ms(7);
}
void lcd_str (char *str){
	int i;
	while (str[i]!=0){
 16a:	89 91       	ld	r24, Y+
 16c:	81 11       	cpse	r24, r1
 16e:	fb cf       	rjmp	.-10     	; 0x166 <lcd_str+0xe>
		lcd_write(str[i]);
		i++;
	}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <main>:
#include "lcd.h"


int main(void)
{
	lcd_init();
 176:	0e 94 67 00 	call	0xce	; 0xce <lcd_init>
	lcd_command(0x81);
 17a:	81 e8       	ldi	r24, 0x81	; 129
 17c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_str("amit");
 180:	80 e6       	ldi	r24, 0x60	; 96
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_str>
	lcd_command(0x86);
 188:	86 e8       	ldi	r24, 0x86	; 134
 18a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_str("17");
 18e:	85 e6       	ldi	r24, 0x65	; 101
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_str>
	lcd_command(0xc4);
 196:	84 ec       	ldi	r24, 0xC4	; 196
 198:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_str("ahmad");
 19c:	88 e6       	ldi	r24, 0x68	; 104
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 ac 00 	call	0x158	; 0x158 <lcd_str>
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <main+0x2e>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
